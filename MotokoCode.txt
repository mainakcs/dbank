import Debug "mo:base/Debug";    // To use print function, Debug library is used, which is at mo:base/Debug
// import Nat "mo:base/Nat";
// It means importing Debug inside Mokoto's base library 
// It is named as Debug and further in the program we use Debug to used this library
import Time "mo:base/Time";
import Float "mo:base/Float";

// Actor is the class in Motoko
actor DBank {
  stable var currentValue :Float = 300; // var keyword is used to intilize the value of a variable.
  // currentValue := 100; // if you want to change the value of the variable you need to use := operator instead of =
  // let id = 5930458034850394; // let keyword is used to create constants, id is a constant value, you cannot change its value
  // like currentValue variable
  Debug.print("Hello");
  /// print by only takes text i.e String, it cannot take any natural numbers by default. To do that - 
  // Debug.print(debug_show(currentValue));
  // Debug.print(debug_show(id));

  public func topUp(amount: Float) {
    currentValue += amount;
    Debug.print(debug_show(currentValue));
  };

  public func withdraw(amount: Float) {    // Update function goes through the blockchain, so takes time
    let tempValue: Float = currentValue - amount;
    if (tempValue>=0) {
      Debug.print(debug_show(tempValue));
    }
    else {
      Debug.print("Entered number is larger than the sum present in the the currentValue");
    }
  };

  public func checkBalance(): async Float{  // Query function does not change the data, does not go through the blockchian, so very fast
    return currentValue;
  };
  // topUp();

  var startTime : Time.Time  = Time.now();
  public func printTime () {
    Debug.print(debug_show(startTime));
  };

  public func compound() {
    let currentTime = Time.now();
    var timeElapsedN = (currentTime-startTime);
    var timeElapsed = timeElapsedN/(1000000000);
    Debug.print(debug_show(timeElapsed));
    currentValue := currentValue * (1.01 )** Float.fromInt(timeElapsed);
    startTime := currentTime;
  };
  
}

